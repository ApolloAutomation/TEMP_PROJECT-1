substitutions:
  version: "25.3.30.2"
  device_description: $TEMP_PRO-1 made by Apollo Automation - version ${version}.

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: esp-idf

api:
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'

i2c:
  sda: GPIO16
  scl: GPIO17
  id: bus_a

web_server:  
  port: 80

one_wire:
  - platform: gpio
    pin: GPIO6

# Buzzer
output:
  - platform: ledc
    pin: GPIO8
    id: buzzer

rtttl:
  id: rtttl_buzzer
  output: buzzer

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    pin: 
      number: GPIO0
      inverted: true
      mode:
        input: true
        pullup: true
    id: reset_button
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(factory_reset_switch).turn_on();
            }
            else {
              // StatusCheck
              id(statusCheck).execute();
            }

  - platform: template
    name: Temperature Within Range
    id: temp_within_range
    lambda: 'return (id(sht_temperature).state <= id(max_temp).state) && (id(sht_temperature).state >= id(min_temp).state) ? "true" : "false";'

  - platform: template
    name: Humidity Within Range
    id: humidity_within_range
    lambda: 'return (id(sht_humidity).state <= id(max_humidity).state) && (id(sht_humidity).state >= id(min_humidity).state) ? "true" : "false";'

sensor:
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: sht3xd
    temperature:
      name: "Temperature"
      id: sht_temperature
    humidity:
      name: "Relative Humidity"
      id: sht_humidity

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO4
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 4
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all

number:
  - platform: template
    id: min_temp
    name: Min Temperature
    min_value: -60
    max_value: 100
    step: 0.1
    unit_of_measurement: '°C'
    initial_value: -20
    optimistic: true
    update_interval: never
    mode: box

  - platform: template
    id: max_temp
    name: Max Temperature
    min_value: -60
    max_value: 100
    step: 0.1
    unit_of_measurement: '°C'
    initial_value: 200
    optimistic: true
    update_interval: never
    mode: box

  - platform: template
    id: min_humidity
    name: Min Humidity
    min_value: 0
    max_value: 100
    step: 0.1
    unit_of_measurement: '%'
    initial_value: 0
    optimistic: true
    update_interval: never
    mode: box

  - platform: template
    id: max_humidity
    name: Max Humidity
    min_value: 0
    max_value: 100
    step: 0.1
    unit_of_measurement: '%'
    initial_value: 100
    optimistic: true
    update_interval: never
    mode: box

switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true
  - platform: gpio
    pin: GPIO5
    name: "Accessory Power"
    id: accessory_power
    restore_mode: ALWAYS_ON
    setup_priority: 1100
    internal: true
  - platform: template
    name: "Alarm Outside Temp Range"
    id: alarm_outside_temp_range    
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
  - platform: template
    name: "Alarm Outside Humidity Range"
    id: alarm_outside_humidity_range    
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF

select:
  - platform: template
    id: firmware_selector
    name: Firmware Type
    icon: "mdi:test-tube"
    entity_category: config
    optimistic: true
    restore_value: true
    options:
      - "WiFi"
      - "Ethernet"
    initial_option: "WiFi"
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(firmware_selector).state == "Ethernet";'
            then:
              - logger.log: "OTA updates set to use ethernet firmware"
              - lambda: id(update_http_request).set_source_url("https://apolloautomation.github.io/TEMP_PROJECT-1/firmware-e/manifest.json");
              - component.update: update_http_request
            else:
              - logger.log: "OTA updates set to use wifi firmware"
              - lambda: id(update_http_request).set_source_url("https://apolloautomation.github.io/TEMP_PROJECT-1/firmware-w/manifest.json");
              - component.update: update_http_request

interval:  
  - interval: 10s
    startup_delay: 10s
    then:
      - if:
          condition:
            lambda: !lambda |-
              return (id(alarm_outside_temp_range).state && !id(temp_within_range).state) || (id(alarm_outside_humidity_range).state && !id(humidity_within_range).state);
          then:
            - lambda: !lambda |-
                id(rgb_light).turn_on().set_effect("Fast Pulse").perform();
                id(rgb_light).turn_on().set_rgb(1, 0, 0).set_transition_length(0).perform();
                id(rtttl_buzzer).play("siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e;");
          else:
            if:
              condition:
                lambda: !lambda |-
                  return (id(temp_within_range).state && id(humidity_within_range).state);
              then:
                - light.turn_off: rgb_light