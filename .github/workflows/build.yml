name: Publish
env:
  DEVICE_NAME: temp-pro-1

on:
  push:
    branches:
      - main

jobs:
  check-for-yaml:
    name: Check for YAML Changes
    runs-on: ubuntu-latest
    outputs:
      yaml_changed: ${{ steps.check.outputs.yaml_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Find .yaml Changes in Last PR Merge
        id: check
        run: |
          BASE_COMMIT=$(git rev-parse HEAD^1)
          MERGE_COMMIT=$(git rev-parse HEAD)

          if git diff --name-only $BASE_COMMIT $MERGE_COMMIT | grep -q '\.yaml$'; then
            echo "yaml_changed=true" >> $GITHUB_OUTPUT
          else
            echo "yaml_changed=false" >> $GITHUB_OUTPUT
          fi

  set-version:
    name: Set Version
    runs-on: ubuntu-latest
    needs: [check-for-yaml]
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'

    outputs:
      version: ${{ steps.read_version.outputs.version }}
      upload_url: ${{ steps.run-release-drafter.outputs.upload_url }}
      html_url: ${{ steps.run-release-drafter.outputs.html_url }}
      # We no longer try to pass the entire body as a job output (which can truncate)

    permissions:
      contents: write
      pages: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version from YAML file
        id: read_version
        run: |
          version=$(awk '/substitutions:/ {found=1} found && /version:/ {print $2; exit}' Integrations/ESPHome/Core.yaml | tr -d '"')
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "Detected version: $version"

      - name: Fetch Last Merged PR Body
        id: last_pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=closed&sort=updated&direction=desc&per_page=1")
          PR_BODY=$(echo "$PR_INFO" | jq -r '.[0].body')
          echo "$PR_BODY" > pr_body.txt

      - name: ðŸš€ Run Release Drafter
        id: run-release-drafter
        uses: release-drafter/release-drafter@v6
        with:
          version: ${{ steps.read_version.outputs.version }}
          publish: true
          tag: ${{ steps.read_version.outputs.version }}
          name: Release ${{ steps.read_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Save the final release body from run-release-drafter (if needed)
      # Or we can just keep PR_BODY from above. If you need the fully compiled release notes,
      # fetch them from the newly published release. For simplicity, let's assume pr_body.txt is enough.
      # We'll store pr_body.txt or the full release body as an artifact.
      - name: Upload Release Body Artifact
        if: ${{ steps.run-release-drafter.conclusion == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: release-body
          path: pr_body.txt

  build-firmware-e:
    name: Build And Release (Firmware)
    needs:
      - check-for-yaml
      - set-version
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Body Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-body
          path: .

      - name: Build firmware
        uses: esphome/workflows/.github/workflows/build.yml@main
        with:
          files: |
            Integrations/ESPHome/TEMP_PRO-1_ETH.yaml
          esphome-version: stable
          combined-name: firmware-e
          # Instead of 'release-summary:', pass 'summary-file: pr_body.txt'
          summary-file: pr_body.txt
          release-version: ${{ needs.set-version.outputs.version }}

  build-firmware-w:
    name: Build And Release (Firmware W)
    needs:
      - check-for-yaml
      - set-version
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Body Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-body
          path: .

      - name: Build firmware
        uses: esphome/workflows/.github/workflows/build.yml@main
        with:
          files: |
            Integrations/ESPHome/TEMP_PRO-1_W.yaml
          esphome-version: stable
          combined-name: firmware-w
          summary-file: pr_body.txt
          release-url: ${{ needs.set-version.outputs.html_url }}
          release-version: ${{ needs.set-version.outputs.version }}

  build-site:
    name: Build Site
    runs-on: ubuntu-latest
    needs:
      - check-for-yaml
      - build-firmware-e
      - build-firmware-w
      - set-version
    if: needs.check-for-yaml.outputs.yaml_changed == 'true'
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Build
        uses: actions/jekyll-build-pages@v1.0.13
        with:
          source: ./static
          destination: ./output

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: output

  publish:
    name: Publish to GitHub Pages
    runs-on: ubuntu-latest
    needs:
      - build-site
      - build-firmware-e
      - build-firmware-w
      - set-version
    if: needs.check-for-yaml.outputs.yaml_changed == 'true' && ${{ github.run_attempt == 1 }}
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1) Download Firmware
      - uses: actions/download-artifact@v4
        with:
          name: firmware-e
          path: firmware-e

      # 2) Download Firmware-W
      - uses: actions/download-artifact@v4
        with:
          name: firmware-w
          path: firmware-w

      # 3) Zip them up
      - name: Zip firmware
        run: |
          zip -r firmware-e.zip firmware-e
          zip -r firmware-w.zip firmware-w

      # 4) Upload firmware-e.zip as an asset
      - name: Upload firmware-e.zip
        id: upload-firmware
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.set-version.outputs.upload_url }}
          asset_path: firmware-e.zip
          asset_name: firmware-e.zip
          asset_content_type: application/zip

      # 5) Upload firmware-w.zip
      - name: Upload firmware-w.zip
        id: upload-firmware-w
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.set-version.outputs.upload_url }}
          asset_path: firmware-w.zip
          asset_name: firmware-w.zip
          asset_content_type: application/zip

      - name: Copy firmware-e
        run: |
          mkdir -p output/firmware-e
          cp -r firmware-e/${{ needs.build-firmware-e.outputs.version }}/* output/firmware-e/

      - name: Copy firmware-w
        run: |
          mkdir -p output/firmware-w
          cp -r firmware-w/${{ needs.build-firmware-w.outputs.version }}/* output/firmware-w/

      - uses: actions/download-artifact@v4
        with:
          name: site
          path: output

      - uses: actions/upload-pages-artifact@v3
        with:
          path: output
          retention-days: 1

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4